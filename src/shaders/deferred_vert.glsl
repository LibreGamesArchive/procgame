#version 330

/*  Inside-out icosahedron mesh for the light volume    */
const vec3 light_verts[60] = vec3[](
    vec3(1.000, 0.618, 0.000),
    vec3(0.618, 0.000, 1.000),
    vec3(0.000, 1.000, 0.618),
    vec3(1.000, -0.618, 0.000),
    vec3(0.618, 0.000, 1.000),
    vec3(1.000, 0.618, 0.000),
    vec3(0.000, -1.000, 0.618),
    vec3(0.618, 0.000, 1.000),
    vec3(1.000, -0.618, 0.000),
    vec3(-0.618, 0.000, 1.000),
    vec3(0.618, 0.000, 1.000),
    vec3(0.000, -1.000, 0.618),
    vec3(0.618, 0.000, 1.000),
    vec3(-0.618, 0.000, 1.000),
    vec3(0.000, 1.000, 0.618),
    vec3(0.618, 0.000, -1.000),
    vec3(1.000, -0.618, 0.000),
    vec3(1.000, 0.618, 0.000),
    vec3(0.000, 1.000, -0.618),
    vec3(0.618, 0.000, -1.000),
    vec3(1.000, 0.618, 0.000),
    vec3(0.000, 1.000, -0.618),
    vec3(1.000, 0.618, 0.000),
    vec3(0.000, 1.000, 0.618),
    vec3(-1.000, 0.618, 0.000),
    vec3(0.000, 1.000, -0.618),
    vec3(0.000, 1.000, 0.618),
    vec3(-0.618, 0.000, -1.000),
    vec3(0.000, 1.000, -0.618),
    vec3(-1.000, 0.618, 0.000),
    vec3(-0.618, 0.000, -1.000),
    vec3(0.618, 0.000, -1.000),
    vec3(0.000, 1.000, -0.618),
    vec3(0.618, 0.000, -1.000),
    vec3(0.000, -1.000, -0.618),
    vec3(1.000, -0.618, 0.000),
    vec3(0.000, -1.000, 0.618),
    vec3(1.000, -0.618, 0.000),
    vec3(0.000, -1.000, -0.618),
    vec3(-1.000, -0.618, 0.000),
    vec3(0.000, -1.000, 0.618),
    vec3(0.000, -1.000, -0.618),
    vec3(-1.000, -0.618, 0.000),
    vec3(-1.000, 0.618, 0.000),
    vec3(-0.618, 0.000, 1.000),
    vec3(-1.000, 0.618, 0.000),
    vec3(0.000, 1.000, 0.618),
    vec3(-0.618, 0.000, 1.000),
    vec3(-0.618, 0.000, -1.000),
    vec3(-1.000, -0.618, 0.000),
    vec3(0.000, -1.000, -0.618),
    vec3(-0.618, 0.000, -1.000),
    vec3(0.000, -1.000, -0.618),
    vec3(0.618, 0.000, -1.000),
    vec3(-1.000, -0.618, 0.000),
    vec3(-0.618, 0.000, 1.000),
    vec3(0.000, -1.000, 0.618),
    vec3(-1.000, -0.618, 0.000),
    vec3(-0.618, 0.000, -1.000),
    vec3(-1.000, 0.618, 0.000));

uniform mat4 projview_matrix;
uniform vec4 light;
out vec4 f_pos;

void main()
{
    gl_Position = projview_matrix *
        vec4((light_verts[gl_VertexID] * light.w) + light.xyz, 1.0);
    f_pos = gl_Position;
}

